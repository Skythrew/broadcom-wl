name: Continuous Integration

on:
  push:
    branches: [ patch-linux4.7 ]
  pull_request:
    branches: [ patch-linux4.7 ]

permissions: {}

jobs:

  build:
    name: Build Kernel Module
    # Linux runners do not currently support nested virtualization (KVM)
    runs-on: macos-12

    strategy:
      matrix:
        kernel:
        - '5.17'
        - '5.18'
        - '5.19'
        - '6.0'

    steps:
    - uses: actions/checkout@v3

    - name: Lima image cache
      uses: actions/cache@v3
      with:
        path: ~/Library/Caches/lima/download
        key: ${{ github.job }}-${{ runner.os }}-lima-${{ hashFiles('.github/workflows/lima/build.yaml') }}
        restore-keys: ${{ github.job }}-${{ runner.os }}-lima-

    - name: Copy repository contents to Lima mount
      id: workdir
      run: |
        declare repo
        repo="$(basename ${PWD})"
        echo "path=/tmp/lima/${repo}" >> "${GITHUB_OUTPUT}"
        mkdir -p /tmp/lima
        cp -rp ${PWD} /tmp/lima/

    - name: Bootstrap Lima instance
      id: builder
      run: |
        cp -p .github/workflows/lima/kernel-${{ matrix.kernel }}.vars /tmp/lima/kernel.vars
        limactl start --name=default .github/workflows/lima/build.yaml
        rm /tmp/lima/kernel.vars
        limactl stop
        sleep 5
        limactl start
        pushd ${{ steps.workdir.outputs.path }} >/dev/null
        declare kernel
        kernel="$(lima uname -r)"
        popd >/dev/null
        echo "kernel=${kernel%%-[0-9][0-9][0-9].fc[0-9][0-9].x86_64}" >> "${GITHUB_OUTPUT}"

    - name: Verify installed kernel version
      uses: madhead/semver-utils@v2
      id: kernelv
      with:
        version: ${{ steps.builder.outputs.kernel }}
        satisfies: ${{ matrix.kernel }}.x
        lenient: false

    - name: Build wl module
      id: build
      run: |
        if [[ ${{ steps.kernelv.outputs.satisfies }} != 'true' ]]; then
          err='Installed kernel was ${{ steps.builder.outputs.kernel }}, not ${{ matrix.kernel }}.x'
          echo "::error title=Wrong kernel version::${err}"
          exit 1
        fi
        pushd ${{ steps.workdir.outputs.path }} >/dev/null
        lima make
        lima make clean
        popd >/dev/null

    - name: Collect cloud-init logs from Lima instance
      if: failure() && steps.builder.outcome == 'failure' || steps.build.outcome == 'failure'
      run: |
        pushd ${{ steps.workdir.outputs.path }} >/dev/null
        lima sudo cp /var/log/cloud-init.log /var/log/cloud-init-output.log /tmp/lima/
        popd >/dev/null
        sudo chown -v ${USER} /tmp/lima/cloud-init*.log
        cp -p /tmp/lima/cloud-init*.log ~/.lima/default/

    - name: Upload Lima instance logs
      if: failure() && steps.builder.outcome == 'failure' || steps.build.outcome == 'failure'
      uses: actions/upload-artifact@v3
      with:
        name: lima-logs-${{ matrix.kernel }}
        path: ~/.lima/default/*.log

    - name: Clean up
      if: always()
      run: |
        command -v limactl >/dev/null || exit 0
        declare -i running=0
        running="$(limactl list --json | jq -r 'if .status and .status == "Running" then 1 else 0 end')"
        (( running )) && limactl stop
        limactl rm default
